[{"filepath": "/Users/user/P/lineCompletion/linecompletion/backend/venv/lib/python3.13/site-packages/yaml/__init__.py", "line": 39, "text": "def parse(stream, Loader=Loader):\n    \"\"\"\n    Parse a YAML stream and produce parsing events.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        while loader.check_event():\n            yield loader.get_event()\n    finally:\n        loader.dispose()", "last_modified_timestamp_epoch": 1753997669.9327571}, {"filepath": "/Users/user/P/lineCompletion/linecompletion/backend/venv/lib/python3.13/site-packages/numpy/_utils/_pep440.py", "line": 115, "text": "def parse(version):\n    \"\"\"\n    Parse the given version string and return either a :class:`Version` object\n    or a :class:`LegacyVersion` object depending on if the given version is\n    a valid PEP 440 version or a legacy version.\n    \"\"\"\n    try:\n        return Version(version)\n    except InvalidVersion:\n        return LegacyVersion(version)", "last_modified_timestamp_epoch": 1753997669.9893448}, {"filepath": "/Users/user/P/lineCompletion/linecompletion/backend/venv/lib/python3.13/site-packages/packaging/version.py", "line": 46, "text": "def parse(version: str) -> Version:\n    \"\"\"Parse the given version string.\n\n    >>> parse('1.0.dev1')\n    <Version('1.0.dev1')>\n\n    :param version: The version string to parse.\n    :raises InvalidVersion: When the version string is not a valid version.\n    \"\"\"\n    return Version(version)", "last_modified_timestamp_epoch": 1753997669.958212}, {"filepath": "/Users/user/P/lineCompletion/linecompletion/backend/venv/lib/python3.13/site-packages/pip/_vendor/packaging/version.py", "line": 46, "text": "def parse(version: str) -> Version:\n    \"\"\"Parse the given version string.\n\n    >>> parse('1.0.dev1')\n    <Version('1.0.dev1')>\n\n    :param version: The version string to parse.\n    :raises InvalidVersion: When the version string is not a valid version.\n    \"\"\"\n    return Version(version)", "last_modified_timestamp_epoch": 1753875580.580188}, {"filepath": "/Users/user/P/lineCompletion/linecompletion/node_modules/flatted/python/flatted.py", "line": 116, "text": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:\n            input.append(value)\n\n    value = input[0]\n\n    if _is_array(value):\n        return _loop(_array_keys(value), input, [value], value)\n\n    if _is_object(value):\n        return _loop(_object_keys(value), input, [value], value)\n\n    return value", "last_modified_timestamp_epoch": 1753872528.0363173}]